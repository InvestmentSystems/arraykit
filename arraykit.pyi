import typing

import numpy  # type: ignore

_T = typing.TypeVar('_T')

class ArrayGO:

    values: numpy.array
    def __init__(
        self, iterable: typing.Iterable[object], *, own_iterable: bool = ...
    ) -> None: ...
    def __iter__(self) -> typing.Iterator[typing.Any]: ...
    def __getitem__(self, __key: object) -> typing.Any: ...
    def __len__(self) -> int: ...
    def append(self, __value: object) -> None: ...
    def copy(self: _T) -> _T: ...
    def extend(self, __values: typing.Iterable[object]) -> None: ...

def immutable_filter(__array: numpy.array) -> numpy.array: ...
def mloc(__array: numpy.array) -> int: ...
def name_filter(__name: typing.Hashable) -> typing.Hashable: ...
def resolve_dtype(__d1: numpy.dtype, __d2: numpy.dtype) -> numpy.dtype: ...
def resolve_dtype_iter(__dtypes: typing.Iterable[numpy.dtype]) -> numpy.dtype: ...
